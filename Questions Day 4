1. Given an integer n, return a string array answer (1-indexed) where:
 answer[i] == "FizzBuzz" if i is divisible by 3 and 5.
 answer[i] == "Fizz" if i is divisible by 3.
 answer[i] == "Buzz" if i is divisible by 5.
 answer[i] == i (as a string) if none of the above conditions are true.
Test Case:
1.Input: n = 3
Output: ["1","2","Fizz"]
2.Input: n = 5
Output: ["1","2","Fizz","4","Buzz"]
3.Input: n=15
Output: ["1","2","Fizz","4","Buzz","Fizz","7","8","Fizz","Buzz","11","Fizz","13","14",
"FizzBuzz"]
4.Input: n = 10
Output: ["1","2","Fizz","4","Buzz","Fizz","7","8","Fizz","Buzz"]
5. Input: n = 20
Output:
["1","2","Fizz","4","Buzz","Fizz","7","8","Fizz","Buzz","11","Fizz","13","14","FizzBuzz",
“16”, “17”, Fizz", “19”, Buzz"]
2. Write a program to find the number of student users in the college, get the total users, staff
users details from the client. Note for every 3 staff user there is one Non-teaching staff user
assigned by default.
Sample Input:
Total Users: 856
Staff Users: 126
Sample Output:
Student Users: 688
Test Cases:
1. Total User: 0
2. Total User: -143
3. Total User: 1026, Staff User: 1026
4. Total User: 450, Staff User: 540
5. Total User: 600, Staff User: 450
3. How Many Numbers Are Smaller Than the Current Number (Easy)
Given the array nums, for each nums[i] find out how many numbers in the array are smaller
than it. That is, for each nums[i] you have to count the number of valid j's such that j !=
i and nums[j] < nums[i].
Return the answer in an list.
Test Cases:
1.Input: nums = [8,1,2,2,3]
Output: [4,0,1,1,3]
Explanation:
For nums[0]=8 there exist four smaller numbers than it (1, 2, 2 and 3).
For nums[1]=1 does not exist any smaller number than it.
For nums[2]=2 there exist one smaller number than it (1).
For nums[3]=2 there exist one smaller number than it (1).
For nums[4]=3 there exist three smaller numbers than it (1, 2 and 2).
2. Input: nums = [6,5,4,8]
Output: [2,1,0,3]
3. Input: nums = [7,7,7,7]
Output: [0,0,0,0]
4.nums=[1,2,3,5,5,6]
5. nums=[0,0,0,0]
4. Valid Palindrome
A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and
removing all non-alphanumeric characters, it reads the same forward and backward.
Alphanumeric characters include letters and numbers.
Given a string s, return true if it is a palindrome, or false otherwise.
Test Cases:
1.Input: s = "A man, a plan, a canal: Panama"
Output: true
2.Input: s = "race a car"
Output: false
3.Input: s = " "
Output: true
4. s= “madam”
5.s= “honest”
5. Given an array of integers where each element represents the max number of steps that can
be made forward from that element. Write a function to return the minimum number of jumps
to reach the end of the array (starting from the first element). If an element is 0, they cannot
move through that element. If the end isn’t reachable, return -1.
Test Case:
1.Input: arr[] = [1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9]
Output: 3 (1-> 3 -> 9 -> 9)
2.Input: arr[] = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Output: 10
3.Input: arr[] = [2,3,1,1,4]
Output: 2
4.Input: arr[] = [1, 3, 6, 1, 0, 9]
Output: 3
5.Input: arr[] = [2,3,0,1,4]
Output: 2
6. Write a function delchar(s,c) that takes as input strings s and c, where c has length 1 (i.e., a
single character), and returns the string obtained by deleting all occurrences of c in s. If c has
a length other than 1, the function should return s.
Sample Input:
Enter the string: Hello world
Enter a charater to be deleted:l
Sample output:
String after the charcter is removed: Heo Word
Test cases:
1. Good evening
2. Take care
3. 123456s
4. Red rose
5. Flower
7. Count Sorted Vowel Strings
Given an integer n, return the number of strings of length n that consist only of vowels
(a, e, i, o, u) and are lexicographically sorted.
A string s is lexicographically sorted if for all valid i, s[i] is the same as or comes
before s[i+1] in the alphabet.
Test Cases:
1.Input: n = 1
Output: 5
Explanation: The 5 sorted strings that consist of vowels only are ["a","e","i","o","u"].
2.Input: n = 2
Output: 15
Explanation: The 15 sorted strings that consist of vowels only are
["aa","ae","ai","ao","au","ee","ei","eo","eu","ii","io","iu","oo","ou","uu"].
Note that "ea" is not a valid string since 'e' comes after 'a' in the alphabet.
3.Input: n = 33
Output: 66045
4.n=55
5=32
8. Roman to Integer
Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.
Symbol Value
I 1
V 5
X 10
L 50
C 100
D 500
M 1000
For example, 2 is written as II in Roman numeral, just two ones added together. 12 is written
as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.
Roman numerals are usually written largest to smallest from left to right. However, the
numeral for four is not IIII. Instead, the number four is written as IV. Because the one is
before the five we subtract it making four. The same principle applies to the number nine,
which is written as IX. There are six instances where subtraction is used:
 I can be placed before V (5) and X (10) to make 4 and 9.
 X can be placed before L (50) and C (100) to make 40 and 90.
 C can be placed before D (500) and M (1000) to make 400 and 900.
Given a roman numeral, convert it to an integer.
Test Cases:
1.Input: s = "III"
Output: 3
2.Input: s = "LVIII"
Output: 58
3.Input: s = "MCMXCIV"
Output: 1994
4.s= “LV”
5.S= “MMl”
9. The year is divided into four seasons: spring, summer, fall and winter. While the exact
dates that the seasons change vary a little bit from year to year because of the way that the
calendar is constructed, we will use the following dates for this exercise:
Season First day
Summer March 20
Spring June 21
Fall September 22
Winter December 21
Create a program that reads a month and day from the user. The user will enter the name of
the month as a string, followed by the day within the month as an integer. Then your program
should display the season associated with the date that was entered. Note: Enter First three
letter for month example: Jan for January, Feb for February and so on....and first letter of the
month should be capital
Input:
Enter the month: march
Enter the date: 21
Output:
The season is currently summer
Test Cases:
1. July, 29
2. September, 5
3. December, 30
4. March, 12
5. June, 27
10. Scramble String
We can scramble a string s to get a string t using the following algorithm:
If the length of the string is 1, stop.
If the length of the string is > 1, do the following:
Split the string into two non-empty substrings at a random index, i.e., if the string is s, divide
it to x and y where s = x + y.
Randomly decide to swap the two substrings or to keep them in the same order. i.e., after this
step, s may become s = x + y or s = y + x.
Apply step 1 recursively on each of the two substrings x and y.
Given two strings s1 and s2 of the same length, return true if s2 is a scrambled string of s1,
otherwise, return false.
Test cases:
1.Input: s1 = "great", s2 = "rgeat"
Output: true
2.Input: s1 = "abcde", s2 = "caebd"
Output: false
3.Input: s1 = "a", s2 = "a"
Output: true
4.s1=”ab” s2= “ad”
5s1=10 s2=-5
